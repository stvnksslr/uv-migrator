name: publish

on:
  release:
    types: [ published ]

permissions:
  pull-requests: write
  contents: write

env:
  RUST_VERSION: "stable"
  BUILD_ARGS: "--release --all-features"
  BIN_NAME: "uv-migrator"
  DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          # Arm
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-12
          - target: aarch64-pc-windows-msvc
            os: windows-2022
         # x86
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022

    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v4

      - name: Install rust toolchain
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: dtolnay/rust-toolchain@stable


      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - uses: taiki-e/install-action@cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - name: Store artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ env.BIN_NAME }}
          path: target/${{ matrix.target }}/release/${{ env.BIN_NAME }}${{ contains(matrix.target, 'windows') && '.exe' || '' }}
          retention-days: 1

  release:
    name: Release
    needs: [ build ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
