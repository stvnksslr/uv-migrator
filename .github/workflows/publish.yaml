name: publish

on:
  release:
    types: [ published ]


permissions:
  pull-requests: write
  contents: write


env:
  RUST_VERSION: 1.72.1
  BUILD_ARGS: "--release --all-features"
  BIN_NAME: "uv-migrator"
  DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os || 'ubuntu-22.04' }}
    strategy:
      matrix:
        platform:
          - name: Linux x86_64
            target: x86_64-unknown-linux-gnu

          - name: Linux aarch64
            target: aarch64-unknown-linux-gnu

          - name: MacOS x86_64
            target: x86_64-apple-darwin

          - name: MacOS aarch64
            target: aarch64-apple-darwin

          - name: Windows x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v4

      - name: Install rust toolchain
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "${{ env.RUST_VERSION }}"
          override: true
          target: ${{ matrix.platform.target }}
          components: rustfmt, clippy

      - name: Build ${{ matrix.platform.name }} binary
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ !contains(matrix.platform.target, 'x86_64') }}
          args: ${{ env.BUILD_ARGS }} --target ${{ matrix.platform.target }}

      - name: Login to DockerHub
        if: contains(matrix.platform.target, 'apple')
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_LOGIN }}
          password: ${{ env.DOCKER_TOKEN }}
      - name: Build ${{ matrix.platform.name }} binary
        if: contains(matrix.platform.target, 'apple')
        run: |
          docker run --rm --volume "${PWD}":/root/src --workdir /root/src joseluisq/rust-linux-darwin-builder:$RUST_VERSION \
          sh -c "CC=o64-clang CXX=o64-clang++ cargo build $BUILD_ARGS --target ${{ matrix.platform.target }}"

      - name: Store artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-${{ env.BIN_NAME }}
          path: target/${{ matrix.platform.target }}/release/${{ env.BIN_NAME }}${{ contains(matrix.platform.target, 'windows') && '.exe' || '' }}
          retention-days: 1


  release:
    name: Release
    needs: [ build ]
    runs-on: ubuntu-22.04
    if: startsWith( github.ref, 'refs/tags/v' )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Goreleaser
      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}